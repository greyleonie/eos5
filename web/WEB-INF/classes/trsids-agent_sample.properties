# TRS IDS Servlet-Agent Application Config
# TRS身份服务器Servlet应用代理配置文件
#
# Copyright(c): www.trs.com.cn
# Last Modified: 2006-10-09

## 注意事项：
#  1、配置项格式：名称=值
#  2、#开始的行表示注释
##

## 连接属性
#所要连接IDS的IP(或主机)和后台SSLServer端口. 必填.
idm.server.host = 192.9.200.60 192.9.200.170
idm.server.port = 2005
#创建socket数
idm.sockets.amount = 5

#socket超时
#soTimeout = 30000
# 从空闲Socket队列中取出一个Socket的最大间隔(毫秒, ms), 有效值3000-30000之间, 默认为15000
#socket.dispatchWaitMillis=15000

#使用IBM JDK时在JSSE可能会遇到问题, 此时可采用如下配置(如果使用"socketType=plain"则必须在IDS端也配置"socketType=plain")
socketType=plain
#socketType=dummySSL

## 协作应用属性
#协作应用名. 必填, 并且必须和在所要连接IDS上注册的协作应用名保持一致.
agent.name = 
#是否允许匿名访问, y为允许, 否则为不允许.
allow.anonymous = n
#协作应用实现的IDS回调接口的类名称(包括包名的类名). 必填.
#TRS BBS实现的IDS回调接口的类名称
#coAppActor.className = com.trs.idm.coappsupport.bbs.BBSActor
#TRS CIS实现的IDS回调接口的类名称
#coAppActor.className = com.trs.idm.coappsupport.cis.CISActor
#TRS CDS(Demo应用)实现的IDS回调接口的类名称
#coAppActor.className = com.trs.cds.ids.app.CDS4IDSWebCoAppActor
#TRS CDS(管理台)实现的IDS回调接口的类名称
#coAppActor.className = com.trs.cds.ids.admin.CDSAdmin4IDSWebCoAppActor
#TRS WCM v5.1实现的IDS回调接口的类名称
#coAppActor.className = com.trs.idm.coappsupport.wcm.WCM51Actor
#TRS WCM v5.2实现的IDS回调接口的类名称
#coAppActor.className = com.trs.presentation.ids.WCM52Actor
#Demo
#coAppActor.className = com.trs.idm.client.DemoActor
#第三方应用实现的IDS回调接口的类名称, 根据实际情况填写!
coAppActor.className = 
#如果第三方协作应用采用提供page页面的集成方式，则actor为
#coAppActor.className = com.trs.idm.client.actor.page.PagedServletAppActor

#####################################################################
# 该应用web.xml中TRSIdSSSOFilter截获的URL中, 对哪些URL进行SSO控制.
# 有两种配置方式, 对应两个配置项: ignoreUrl.prefix和processUrl.prefix.
#方式1: 不进行SSO控制的链接.
#ignoreUrl.prefix = 
#方式2: 进行SSO控制的链接.
#processUrl.prefix =
#
# 相关说明:
#1. 两个配置项均采用前缀匹配方式(即"/admin"相当于"/admin*", 匹配所有以"/admin"开始的URL). 
#2. 两个配置项均可以配置多个值, 多个值间用","来分隔. 比如"/blogger/,/admin/" 
#3. 两个配置项如果都不配置, 则对所有被TRSIdSSSOFilter截获的URL都进行SSO.
#4. 建议两项中只配置一项, 避免把问题复杂化. 除非有非常特殊的需要必须同时配置两项. 
#5. 如果两个配置项都配置了, 则对于重合部分的URL匹配, processUrl.prefix的优先级更高.
#6. 更多疑问请参考产品文档的说明.
#
# 一些配置示例:
#适用于TRS WCM v5.1:
#ignoreUrl.prefix = /appManager.jsp,/doc/soap,/doc/batch_unzip.jsp,/wcmregister.jsp
#适用于TRS CIS v2.5:
#ignoreUrl.prefix = /admin/
#适用于TRS Blog(BSP):
#processUrl.prefix = /blogger/,/admin/
#####################################################################

#注销操作链接, 用于统一注销. 如果填写错误则会影响注销功能.
logout.uri = /logout.jsp
#TRS WCM, TRS CIS, TRS CDS的注销操作链接均为
#logout.uri = /logout.jsp
#TRS BBS暂无， 忽略

#协作应用的自有登录页面的form action链接. 如果协作应用不使用自有登录页面, 可空缺.
loginAction.uri = /do_login.jsp
#TRS CDS的自有登录页面的form action链接
#loginAction.uri = /login
#TRS CIS的自有登录页面的form action链接
#loginAction.uri = /login.jsp
#TRS BBS的自有登录页面的form action链接
#loginAction.uri = /UserLogin

#####################################################################
# 在协作应用自有登录页面登录成功失败后分别跳转的页面(gotoUrl)和跳转方式(gotoType).
# 该配置可缺省, 缺省情况下登录后仍返回原页面.
# 跳转方式(gotoType)有两种取值: redirect和forward
# 如果在匿名应用端登录失败后，要获得登录失败原因的提示信息，需要打开afterLoginFail.gotoUrl和afterLoginFail.gotoType两个配置项
#############################################################################################################################
#afterLoginOk.gotoUrl = a.jsp
#afterLoginOk.gotoType = redirect 
#afterLoginFail.gotoUrl = WEB-INF/idsAgentPages/loginFail.jsp
#afterLoginFail.gotoType = forward
########################################应用匿名访问cookie标记的tld级别########################################################
#默认不需要做设置，在特殊情况才做设置，常见场景为访问同一个应用，却可能存在不同的域名，比如，访问博客系统，却可能存在以下的访问url：
#http://user1.blog.com, http://user2.blog.com，如果不做tld设置的话，会导致每次访问都需要去身份服务器做验证，而这个是不必要的。
#该设置仅对Agent设置的cookie有效
#可不填，不填则cookie使用默认的domain
cookie.domain.level=

#同步通知中允许的链表最大数量，可以不填，默认是100000
maxAllowAsyncSessionIdNumber=100000

#############################-PageActor配置开始-###############################################

# 当协作应用无法提供Java开发的Actor类时，可以通过提供相应的Page页面完成与身份服务器的集成，
# 下面所有页面都需要重新定制一份，保持与现有系统逻辑页面独立，请不要使用系统自身已存在的页面
# 协作应用用户登录后的session标识，默认为"trs_coapp_loginUser"，当用户未登录时，则session中不存在该标识或该标识对应的value为空
pageActor.sessionLoginFlag = 
# 接受用户登录请求并完成登录逻辑的页面，从应用的上下文（request.getContextPath()）开始，默认为"/pageactor/handleLoginPage.jsp"
# 注意：不要与loginAction.uri重复
pageActor.handleLoginPage = 
# 接受用户退出请求并完成退出逻辑的页面，从应用的上下文（request.getContextPath()）开始，默认为"/pageactor/handleLogoutPage.jsp"
# 注意：不要与logout.uri重复
pageActor.handleLogoutPage = 
# 完成用户添加逻辑的页面，从应用的上下文（request.getContextPath()）开始，默认为"/pageactor/handleAddUserPage.jsp"
pageActor.handleAddUserPage = 
# 完成用户删除逻辑的页面，从应用的上下文（request.getContextPath()）开始，默认为"/pageactor/handleDelUserPage.jsp"
pageActor.handleDelUserPage = 
#完成用户更新逻辑的页面，从应用的上下文（request.getContextPath()）开始，默认为"/pageactor/handleUpdateUserPage.jsp"
pageActor.handleUpdateUserPage = 
# 对于匿名应用而言，如果使用使用自己的登录表单，则需要提供表单用户名和密码元素的名称，用户名表单元素名称默认为 "userName"，密码表单元素名称默认为"password"
pageActor.loginForm.userNameKey = 
pageActor.loginForm.passwordKey = 
#############################-PageActor配置结束-###################################################


#END:配置文件结束